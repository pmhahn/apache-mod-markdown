git diff 1.0.3..dda69ad0c66d7c37221b14a84364ddd2e6ddaa63

Author: Philipp Matthias Hahn <pmhahn@debian.org>
Origin: upstream
Forwarded: not-needed
Last-Update: 2021-11-15

--- apache-mod-markdown-1.0.3.orig/Makefile.am
+++ apache-mod-markdown-1.0.3/Makefile.am
@@ -1,18 +1,16 @@
-## This is the shared library to be built                                       
-lib_LTLIBRARIES = libmodmarkdown.la
+ACLOCAL_AMFLAGS=-I m4
 
-apache_CFLAGS=`@apxs@ -q CFLAGS` `@apxs@ -q EXTRA_INCLUDES`
-apache_LIBEXECDIR=`@apxs@ -q LIBEXECDIR`
+CFLAGS = -I@discount_dir@/include
+LDFLAGS = -L@discount_dir@/lib -lmarkdown
+CPPFLAGS = -D_LARGEFILE64_SOURCE
+#DEFS =
+CLEANFILES = *.la *.o *.slo
 
-## Define the source file for the module
-libmodmarkdown_la_SOURCES = mod_markdown.c
-libmodmarkdown_la_CFLAGS = $(apache_CFLAGS) -I@discount_dir@/include
-libmodmarkdown_la_LDFLAGS = -L@discount_dir@/lib -lmarkdown
+all: mod_markdown.la
 
-## Define that an include directory is required.
-AM_CPPFLAGS = -D_LARGEFILE64_SOURCE
-#DEFS =
+mod_markdown.la: mod_markdown.c
+	@apxs@ -c $(CFLAGS) $(LDFLAGS) $^
 
-install: .libs/libmodmarkdown.so
-	install -D $< $(DESTDIR)$(apache_LIBEXECDIR)/mod_markdown.so
+install: mod_markdown.la
+	@apxs@ -n markdown -i $^
 
--- apache-mod-markdown-1.0.3.orig/README.md
+++ apache-mod-markdown-1.0.3/README.md
@@ -1,5 +1,6 @@
-mod_markdown
-============
+# mod_markdown
+
+[![Build Status](https://travis-ci.org/hamano/apache-mod-markdown.svg?branch=master)](https://travis-ci.org/hamano/apache-mod-markdown)
 
 mod_markdown is Markdown filter module for Apache HTTPD Server.
 
@@ -7,38 +8,159 @@ mod_markdown is Markdown filter module f
 
 * discount
 
-  http://www.pell.portland.or.us/~orc/Code/discount/
+  <http://www.pell.portland.or.us/~orc/Code/discount/>
 
-In debian:
+For Debian/Ubuntu:
 
-    # apt-get install libmarkdown2-dev
+```bash
+# apt install build-essential libtool automake autoconf
+# apt install libmarkdown2-dev apache2 apache2-dev
+```
 
 ## Build
-    % autoreconf -f -i
-    % ./configure --with-apxs=<APXS_PATH> --with-discount=<DISCOUNT_DIR>
-    % make
-    % make install
+
+```bash
+% autoreconf -f -i
+% ./configure --with-apxs=<APXS_PATH> --with-discount=<DISCOUNT_DIR>
+% make
+% make install
+```
 
 Note: `<DISCOUNT_DIR>` is the directory that contains the include directory that contains mkdio.h
 Probably you need to specify --with-discount=/usr or --with-discount=/usr/local
 
 ## Configuration
+
 in httpd.conf:
 
-    LoadModule markdown_module modules/mod_markdown.so
-    <Location /markdown>
-        AddHandler markdown .md
-
-        # If you want to use stylesheet.
-        MarkdownCss style.css
-    </Location>
+```xml
+LoadModule markdown_module modules/mod_markdown.so
+```
+
+You need to specify full path on debian or ubuntu.
+
+```xml
+LoadModule markdown_module /usr/lib/apache2/modules/mod_markdown.so
+```
+
+```xml
+<Location />
+    AddHandler markdown .md
+
+    # If you want to use stylesheet.
+    # MarkdownCss style.css
+    # MarkdownHeaderHtml "<p>Header</p>"
+    # MarkdownFooterHtml "<p>Footer</p>"
+
+</Location>
+```
 
 Or:
 
-    Alias /md /home/matt/md
-    <Directory /home/matt/md>
-        AddHandler markdown .md
-        DirectoryIndex index.md
-        Order allow,deny
-        Allow from all
-    </Directory>
+```xml
+<Directory /var/www>
+    AddHandler markdown .md
+    DirectoryIndex index.md
+</Directory>
+```
+
+### Configuration Options
+
+#### MarkdownWrapper
+
+You can also disable HTML wrapper generation (basically `<html><head></head><body>` and `</body></html>` surrounding your actual markdown fragment) with this code :
+
+```xml
+<Directory /var/www>
+    AddHandler markdown .md
+    MarkdownWrapper Off
+</Directory>
+```
+
+#### MarkdownCss
+
+```xml
+<Location />
+    AddHandler markdown .md
+    MarkdownCss style.css
+</Location>
+```
+
+#### MarkdownDoctype
+
+* HTML_4_01_TRANSITIONAL (default option)
+* HTML_5
+* XHTML_5
+* XHTML_1_0_STRICT
+* XHTML_1_0_TRANSITIONAL
+* XHTML_1_0_FRAMESET
+* XHTML_1_1
+* HTML_4_01_STRICT
+* HTML_4_01_FRAMESET
+* XHTML_BASIC_1_0
+* XHTML_BASIC_1_1
+
+#### MarkdownHeaderHtml
+
+```xml
+MarkdownHeaderHtml "<p>Header</p>"
+```
+
+#### MarkdownFooterHtml
+
+```xml
+MarkdownFooterHtml "<p>Footer</p>"
+```
+
+#### MarkdownHeaderFile
+
+```xml
+MarkdownHeaderFile header.html
+```
+
+#### MarkdownFooterFile
+
+```xml
+MarkdownHeaderFile footer.html
+```
+
+#### MarkdownFlags
+
+```code
+default: MKD_TOC | MKD_AUTOLINK | MKD_FENCEDCODE
+
+Flag | Value | Description
+--- | --- | ---
+MKD_FENCEDCODE   | 0x02000000 | enabled fenced code blocks
+MKD_AUTOLINK     | 0x00004000 | make http://foo.com link even without &lt;&gt;s
+MKD_TOC          | 0x00001000 | do table-of-contents processing
+ |  |
+MKD_1_COMPAT     | 0x00002000 | compatibility with MarkdownTest_1.0
+MKD_CDATA        | 0x00000080 | generate code for xml ![CDATA[...]]
+MKD_EMBED       MKD_NOLINKS|MKD_NOIMAGE|MKD_TAGTEXT
+MKD_EXPLICITLIST  | 0x80000000 |        don't combine numbered/bulletted lists
+MKD_EXTRA_FOOTNOTE  | 0x00200000 |      enable markdown extra-style footnotes
+MKD_GITHUBTAGS   | 0x08000000 | allow dash and underscore in element names
+MKD_IDANCHOR     | 0x04000000 | use id= anchors for TOC links
+MKD_LATEX        | 0x40000000 | handle embedded LaTeX escapes
+MKD_NOALPHALIST  | 0x00080000 | forbid alphabetic lists
+MKD_NODIVQUOTE   | 0x00040000 | forbid >%class% blocks
+MKD_NODLDISCOUNT  | 0x00800000 |        disable discount-style definition lists
+MKD_NODLIST      | 0x00100000 | forbid definition lists
+MKD_NO_EXT       | 0x00000040 | don't allow pseudo-protocols
+MKD_NOHEADER     | 0x00010000 | don't process header blocks
+MKD_NOHTML       | 0x00000008 | don't allow raw html through AT ALL
+MKD_NOIMAGE      | 0x00000002 | don't do image processing, block &lt;img&gt;
+MKD_NOLINKS      | 0x00000001 | don't do link processing, block &lt;a&gt; tags
+MKD_NOPANTS      | 0x00000004 | don't run smartypants()
+MKD_NORELAXED    | 0x00000200 | emphasis happens /everywhere/
+MKD_NOSTRIKETHROUGH  | 0x00000800 |     forbid ~~strikethrough~~
+MKD_NOSTYLE      | 0x00400000 | don't extract &lt;style&gt; blocks
+MKD_NOSUPERSCRIPT  | 0x00000100 |       no A^B
+MKD_NOTABLES     | 0x00000400 | disallow tables
+MKD_SAFELINK     | 0x00008000 | paranoid check for link protocol
+MKD_STRICT       | 0x00000010 | disable SUPERSCRIPT, RELAXED_EMPHASIS
+MKD_TABSTOP      | 0x00020000 | expand tabs to 4 spaces
+MKD_TAGTEXT      | 0x00000020 | process text inside an html tag; no
+MKD_URLENCODEDANCHOR  | 0x10000000 | urlencode non-identifier chars instead of replacing with dots
+```
--- apache-mod-markdown-1.0.3.orig/configure.ac
+++ apache-mod-markdown-1.0.3/configure.ac
@@ -9,36 +9,28 @@ AM_CONFIG_HEADER(config.h)
 AC_PROG_CC
 AM_PROG_LIBTOOL
 
-AC_CONFIG_MACRO_DIRS([m4])
+AC_CONFIG_MACRO_DIR([m4])
 AX_CHECK_COMPILE_FLAG([-Wall], [CFLAGS="$CFLAGS -Wall"], [], [])
 
 AC_ARG_WITH(apxs,
             [  --with-apxs=FILE      pathname to the Apache apxs tool ],
-            ,[with_apxs="no"])
+            ,[with_apxs="/usr/bin/apxs"])
 AC_MSG_CHECKING(for apxs tool)
-if test "$with_apxs" = "no"; then
-    AC_MSG_ERROR( You need to specify the apxs file using --with-apxs)
+if test -e $with_apxs; then
+    apxs=$with_apxs
+    AC_MSG_RESULT(APXS found!)
 else
-    if test -e $with_apxs; then
-        apxs=$with_apxs
-        AC_MSG_RESULT(APXS found!)
-    else
-        AC_MSG_ERROR( $with_apxs not found.  Check the value you specified with --with-apxs)
-    fi
+    AC_MSG_ERROR( $with_apxs not found.  Check the value you specified with --with-apxs)
 fi
 AC_SUBST(apxs)
 
-AC_ARG_WITH(discount, [  --with-discount=DIR    discount directory ],,[with_discount="no"])
+AC_ARG_WITH(discount, [  --with-discount=DIR    discount directory ],,[with_discount="/usr"])
 AC_MSG_CHECKING(for discount directory)
-if test "$with_discount" = "no"; then
-    AC_MSG_ERROR( You need to specify the discount directory using --with-discount)
+if test -e $with_discount/include/mkdio.h -o -e $with_discount/include/*/mkdio.h; then
+    discount_dir=$with_discount
+    AC_MSG_RESULT(DISCOUNT found!)
 else
-    if test -e $with_discount/include/mkdio.h -o -e $with_discount/include/*/mkdio.h; then
-        discount_dir=$with_discount
-        AC_MSG_RESULT(DISCOUNT found!)
-    else
-        AC_MSG_ERROR( $with_discount not found.  Check the value you specified with --with-discount)
-    fi
+    AC_MSG_ERROR( $with_discount not found.  Check the value you specified with --with-discount)
 fi
 AC_SUBST(discount_dir)
 
--- apache-mod-markdown-1.0.3.orig/mod_markdown.c
+++ apache-mod-markdown-1.0.3/mod_markdown.c
@@ -36,6 +36,10 @@
 **
 **    The sample page from mod_markdown.c
 */
+#include "stdlib.h"
+#include "limits.h"
+
+#include "strings.h"
 
 #include "httpd.h"
 #include "http_config.h"
@@ -47,81 +51,293 @@
 
 module AP_MODULE_DECLARE_DATA markdown_module;
 
+typedef enum {
+    HTML_5 = 0, XHTML_5, XHTML_1_0_STRICT, XHTML_1_0_TRANSITIONAL,
+    XHTML_1_0_FRAMESET, XHTML_1_1, HTML_4_01_STRICT, HTML_4_01_TRANSITIONAL,
+    HTML_4_01_FRAMESET, XHTML_BASIC_1_0, XHTML_BASIC_1_1, HTML_UNSET = -1
+} doctype_t;
+
 typedef struct {
     const void *data;
     struct list_t *next;
 } list_t;
 
 typedef struct {
+    unsigned int wrapper;
+    doctype_t doctype;
     list_t *css;
+    mkd_flag_t mkd_flags;
     const char *header;
     const char *footer;
+    const char *headerfile;
+    const char *footerfile;
 } markdown_conf;
 
 #define P(s) ap_rputs(s, r)
+#ifdef MKD_FENCEDCODE
+#define DEFAULT_MKD_FLAGS (MKD_TOC | MKD_AUTOLINK | MKD_FENCEDCODE)
+#else
+#define DEFAULT_MKD_FLAGS (MKD_TOC | MKD_AUTOLINK )
+#endif
+
+/* XML - Wikipedia
+ * https://en.wikipedia.org/wiki/XML */
+#define XML_DECLARATION "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
+
+/* Document type declaration - Wikipedia
+ * https://en.wikipedia.org/wiki/Document_type_declaration */
+#define DTD_HTML_5 "<!DOCTYPE html>\n"
+/* Both DTDs are the same */
+#define DTD_XHTML_5 DTD_HTML_5
+
+/* Probably should use Apache's internal macro `DOCTYPE_(X)HTML_*` instead */
+#define DTD_XHTML_1_1 \
+"<!DOCTYPE html PUBLIC\n"\
+"          \"-//W3C//DTD XHTML 1.1//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"
+#define DTD_XHTML_1_0_STRICT \
+"<!DOCTYPE html\n" \
+"          PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"
+#define DTD_XHTML_1_0_TRANSITIONAL \
+"<!DOCTYPE html\n" \
+"          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
+#define DTD_XHTML_1_0_FRAMESET \
+"<!DOCTYPE html\n" \
+"          PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n"
+#define DTD_HTML_4_01_STRICT \
+"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n"\
+"          \"http://www.w3.org/TR/html4/strict.dtd\">\n"
+#define DTD_HTML_4_01_TRANSITIONAL \
+"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n"\
+"          \"http://www.w3.org/TR/html4/loose.dtd\">\n"
+#define DTD_HTML_4_01_FRAMESET \
+"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"\n"\
+"          \"http://www.w3.org/TR/html4/frameset.dtd\">\n"
+
+#define DTD_XHTML_BASIC_1_0 \
+"<!DOCTYPE html PUBLIC\n"\
+"          \"-//W3C//DTD XHTML Basic 1.0//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n"
+#define DTD_XHTML_BASIC_1_1 \
+"<!DOCTYPE html PUBLIC\n"\
+"          \"-//W3C//DTD XHTML Basic 1.1//EN\"\n"\
+"          \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">\n"
+
+/* Root Element, <html> standard-specific attributes
+ * Currently we only support the common `xmlns` attribute as the remaining att-
+ * rs are locale-specific */
+#define ROOT_ELEMENT_HTML_ATTR_XMLNS "xmlns=\"http://www.w3.org/1999/xhtml\""
+/* Declaring language in HTML
+ * https://www.w3.org/International/questions/qa-html-language-declarations
+ * "Use the `lang` attribute for pages served as HTML, and the `xml:lang` attri-
+ * bute for pages served as XML. For XHTML 1.x and HTML5 polyglot documents, us-
+ * e both together."
+#define ROOT_ELEMENT_HTML_ATTR_XML_LANG
+#define ROOT_ELEMENT_HTML_ATTR_LANG
+*/
 
-void markdown_output(MMIOT *doc, request_rec *r)
+#include "mod_markdown.h"
+
+int markdown_output(MMIOT *doc, request_rec *r, markdown_conf *conf)
 {
-    char *title;
     int size;
     char *p;
-    markdown_conf *conf;
-    list_t *css;
+    int result;
 
-    conf = (markdown_conf *) ap_get_module_config(r->per_dir_config,
-                                                  &markdown_module);
-    mkd_compile(doc, MKD_TOC|MKD_AUTOLINK);
-    ap_rputs("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", r);
-    ap_rputs("<!DOCTYPE html PUBLIC \n"
-             "          \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"
-             "          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n",
-             r);
-    ap_rputs("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n", r);
-    ap_rputs("<head>\n", r);
-    ap_rputs("<meta http-equiv=\"Content-Type\""
-             " content=\"text/html; charset=UTF-8\" />\n", r);
-
-    if (conf->css) {
-        ap_rputs("<meta http-equiv=\"Content-Style-Type\""
-                 " content=\"text/css\" />\n", r);
-		css = conf->css;
-		do{
-            ap_rprintf(r,
-                       "<link rel=\"stylesheet\" href=\"%s\""
-                       " type=\"text/css\" />\n",
-                       (char *)css->data);
-            css = (list_t *)css->next;
-		}while(css);
-    }
-    title = mkd_doc_title(doc);
-    if (title) {
-        ap_rprintf(r, "<title>%s</title>\n", title);
+    mkd_compile(doc, conf->mkd_flags);
+
+    if (conf->headerfile == NULL) {
+        result = markdown_doc_header(doc, r, conf);
+    } else {
+        result = markdown_doc_contents(r, "Header", conf->headerfile, COMMENT_END);
     }
-    ap_rputs("</head>\n", r);
-    ap_rputs("<body>\n", r);
-    if (title) {
-        ap_rprintf(r, "<h1 class=\"title\">%s</h1>\n", title);
+
+    if (result != OK) {
+        return result;
     }
+
     if ((size = mkd_document(doc, &p)) != EOF) {
         ap_rwrite(p, size, r);
     }
+
+    /* Insert a new line just to be sure it's clean */
     ap_rputc('\n', r);
-    ap_rputs("</body>\n", r);
-    ap_rputs("</html>\n", r);
+
+    if (conf->footerfile == NULL) {
+        result = markdown_doc_footer(r, conf);
+    } else {
+        result = markdown_doc_contents(r, "Footer", conf->footerfile, COMMENT_START);
+    }
+
+    if (result != OK) {
+        return result;
+    }
+
     mkd_cleanup(doc);
+    return OK;
 }
 
-void raw_output(FILE * fp, request_rec * r)
+static int markdown_doc_header(MMIOT *doc, request_rec *r, markdown_conf *conf)
 {
-    char buf[1024];
-    size_t len;
-    while (1) {
-        len = fread(buf, 1, 1024, fp);
-        if (len <= 0) {
+    char *title;
+    list_t *css;
+
+    if(conf->wrapper) {
+        switch(conf->doctype){
+        case XHTML_5:
+        case XHTML_1_0_STRICT:
+        case XHTML_1_0_TRANSITIONAL:
+        case XHTML_1_0_FRAMESET:
+        case XHTML_1_1:
+        case XHTML_BASIC_1_0:
+        case XHTML_BASIC_1_1:
+            ap_rputs(XML_DECLARATION, r);
+            break;
+        default:
+            /* No XML declaration for HTML doctypes */
+            break;
+        }
+
+        switch(conf->doctype){
+        case HTML_5:
+            ap_rputs(DTD_HTML_5, r);
+            break;
+        case XHTML_5:
+            ap_rputs(DTD_XHTML_5, r);
+            break;
+        case XHTML_1_0_STRICT:
+            ap_rputs(DTD_XHTML_1_0_STRICT, r);
+            break;
+        case XHTML_1_0_TRANSITIONAL:
+            ap_rputs(DTD_XHTML_1_0_TRANSITIONAL, r);
+            break;
+        case XHTML_1_0_FRAMESET:
+            ap_rputs(DTD_XHTML_1_0_FRAMESET, r);
+            break;
+        case XHTML_1_1:
+            ap_rputs(DTD_XHTML_1_1, r);
+            break;
+        case HTML_4_01_STRICT:
+            ap_rputs(DTD_HTML_4_01_STRICT, r);
+            break;
+        case HTML_4_01_TRANSITIONAL:
+            ap_rputs(DTD_HTML_4_01_TRANSITIONAL, r);
+            break;
+        case HTML_4_01_FRAMESET:
+            ap_rputs(DTD_HTML_4_01_FRAMESET, r);
+            break;
+        case XHTML_BASIC_1_0:
+            ap_rputs(DTD_XHTML_BASIC_1_0, r);
+            break;
+        case XHTML_BASIC_1_1:
+            ap_rputs(DTD_XHTML_BASIC_1_1, r);
+            break;
+        default:
+            /* Shouldn't be here */
             break;
         }
-        ap_rwrite(buf, len, r);
+
+        switch(conf->doctype){
+        case HTML_5:
+        case HTML_4_01_STRICT:
+        case HTML_4_01_TRANSITIONAL:
+        case HTML_4_01_FRAMESET:
+            ap_rputs("<html>\n", r);
+            break;
+        case XHTML_5:
+        case XHTML_1_0_STRICT:
+        case XHTML_1_0_TRANSITIONAL:
+        case XHTML_1_0_FRAMESET:
+        case XHTML_1_1:
+        case XHTML_BASIC_1_0:
+        case XHTML_BASIC_1_1:
+            ap_rputs("<html " ROOT_ELEMENT_HTML_ATTR_XMLNS ">\n", r);
+            break;
+        default:
+            /* Shouldn't be here */
+            break;
+        }
+
+        ap_rputs("<head>\n", r);
+
+        /* <meta> - HTML | MDN
+         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta */
+        switch(conf->doctype){
+        case HTML_5:
+        case XHTML_5:
+            ap_rputs("<meta charset=\"utf-8\">\n", r);
+            break;
+        case HTML_4_01_STRICT:
+        case HTML_4_01_TRANSITIONAL:
+        case HTML_4_01_FRAMESET:
+            ap_rputs("<meta http-equiv=\"Content-Type\" content=\"text/html; "
+                     "charset=utf-8\">\n", r);
+            break;
+        case XHTML_1_0_STRICT:
+        case XHTML_1_0_TRANSITIONAL:
+        case XHTML_1_0_FRAMESET:
+        case XHTML_1_1:
+        case XHTML_BASIC_1_0:
+        case XHTML_BASIC_1_1:
+            /* Shouldn't needed as XML declaration already specifies Content-Type */
+            break;
+        default:
+            /* Shouldn't be here */
+            break;
+        }
+
+        if (conf->css) {
+            ap_rputs("<meta http-equiv=\"Content-Style-Type\""
+                     " content=\"text/css\" />\n", r);
+            	css = conf->css;
+            	do{
+                ap_rprintf(r,
+                           "<link rel=\"stylesheet\" href=\"%s\""
+                           " type=\"text/css\" />\n",
+                           (char *)css->data);
+                css = (list_t *)css->next;
+            	}while(css);
+        }
+    }
+    title = mkd_doc_title(doc);
+    if(conf->wrapper) {
+        if (title) {
+            ap_rprintf(r, "<title>%s</title>\n", title);
+        }else{
+            ap_rprintf(r, "<title></title>\n");
+        }
+        ap_rputs("</head>\n", r);
+        ap_rputs("<body>\n", r);
+    }
+
+    if (conf->header) {
+        ap_rputs(conf->header, r);
+        ap_rputc('\n', r);
     }
+
+    if (title) {
+        ap_rprintf(r, "<h1 class=\"title\">%s</h1>\n", title);
+    }
+
+    return OK;
+}
+
+static int markdown_doc_footer(request_rec *r, markdown_conf *conf)
+{
+    if (conf->footer) {
+        ap_rputs(conf->footer, r);
+        ap_rputc('\n', r);
+    }
+
+    if(conf->wrapper) {
+        ap_rputs("</body>\n", r);
+        ap_rputs("</html>\n", r);
+    }
+
+    return OK;
 }
 
 /* The markdown handler */
@@ -129,6 +345,9 @@ static int markdown_handler(request_rec
 {
     FILE *fp;
     MMIOT *doc;
+    markdown_conf *p_conf = (markdown_conf *) ap_get_module_config(r->per_dir_config, &markdown_module);
+    markdown_conf *s_conf = (markdown_conf *) ap_get_module_config(r->server->module_config, &markdown_module);
+    markdown_conf *conf   = (markdown_conf *) markdown_config_per_dir_merge(r->pool, s_conf, p_conf);
 
     if (strcmp(r->handler, "markdown")) {
         return DECLINED;
@@ -141,6 +360,10 @@ static int markdown_handler(request_rec
     ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
                   "markdown_handler(): %s", r->filename);
 
+    if (r->args && !strcasecmp(r->args, "raw")) {
+        return DECLINED;
+    }
+
     fp = fopen(r->filename, "r");
     if (fp == NULL) {
         switch (errno) {
@@ -155,23 +378,36 @@ static int markdown_handler(request_rec
         }
     }
 
-    if (r->args && !strcasecmp(r->args, "raw")) {
-        r->content_type = "text/plain; charset=UTF-8";
-        raw_output(fp, r);
-        fclose(fp);
-    } else {
+    switch(conf->doctype){
+    case HTML_5:
+    case HTML_4_01_STRICT:
+    case HTML_4_01_TRANSITIONAL:
+    case HTML_4_01_FRAMESET:
         r->content_type = "text/html";
-        doc = mkd_in(fp, 0);
-        fclose(fp);
-        if (doc == NULL) {
-            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,
-                          "mkd_in() returned NULL\n");
-            return HTTP_INTERNAL_SERVER_ERROR;
-        }
-        markdown_output(doc, r);
+        break;
+    case XHTML_5:
+    case XHTML_1_0_STRICT:
+    case XHTML_1_0_TRANSITIONAL:
+    case XHTML_1_0_FRAMESET:
+    case XHTML_1_1:
+    case XHTML_BASIC_1_0:
+    case XHTML_BASIC_1_1:
+        r->content_type = "application/xhtml+xml";
+        break;
+    default:
+        /* Shouldn't be here */
+        ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r,
+                      "WARNING: DocType was not set as expected (%d)\n", conf->doctype);
+        break;
     }
 
-    return OK;
+    doc = mkd_in(fp, 0);
+    fclose(fp);
+    if (doc == NULL) {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, "mkd_in() returned NULL\n");
+        return HTTP_INTERNAL_SERVER_ERROR;
+    }
+    return markdown_output(doc, r, conf);
 }
 
 
@@ -181,9 +417,60 @@ static void *markdown_config(apr_pool_t
     markdown_conf *c =
         (markdown_conf *) apr_pcalloc(p, sizeof(markdown_conf));
     memset(c, 0, sizeof(markdown_conf));
+    c->doctype = HTML_4_01_TRANSITIONAL;
+    c->mkd_flags = DEFAULT_MKD_FLAGS;
+    c->wrapper = 1;
     return (void *) c;
 }
 
+static const char *set_markdown_wrapper(cmd_parms * cmd, void *conf,
+                                    int arg)
+{
+    markdown_conf *c = (markdown_conf *) conf;
+    c->wrapper = arg;
+    return NULL;
+}
+
+static const char *set_markdown_doctype(cmd_parms * cmd, void *conf,
+                                    const char *arg)
+{
+    markdown_conf *c = (markdown_conf *) conf;
+    if(!strcmp(arg, "HTML_5")){
+        c->doctype = HTML_5;
+    }else if(!strcmp(arg, "XHTML_5")){
+        c->doctype = XHTML_5;
+    }else if(!strcmp(arg, "XHTML_1_0_STRICT")){
+        c->doctype = XHTML_1_0_STRICT;
+    }else if(!strcmp(arg, "XHTML_1_0_TRANSITIONAL")){
+        c->doctype = XHTML_1_0_TRANSITIONAL;
+    }else if(!strcmp(arg, "XHTML_1_0_FRAMESET")){
+        c->doctype = XHTML_1_0_FRAMESET;
+    }else if(!strcmp(arg, "XHTML_1_1")){
+        c->doctype = XHTML_1_1;
+    }else if(!strcmp(arg, "HTML_4_01_STRICT")){
+        c->doctype = HTML_4_01_STRICT;
+    }else if(!strcmp(arg, "HTML_4_01_TRANSITIONAL")){
+        c->doctype = HTML_4_01_TRANSITIONAL;
+    }else if(!strcmp(arg, "HTML_4_01_FRAMESET")){
+        c->doctype = HTML_4_01_FRAMESET;
+    }else if(!strcmp(arg, "XHTML_BASIC_1_0")){
+        c->doctype = XHTML_BASIC_1_0;
+    }else if(!strcmp(arg, "XHTML_BASIC_1_1")){
+        c->doctype = XHTML_BASIC_1_1;
+    }else{
+        /* Unknown value, set doctype to the least strict default */
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, NULL, "apache-mod-markdown: Doctype \"%s\" "
+                     "unknown, setting to HTML 4.01 Transitional.\n", arg);
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, NULL, "apache-mod-markdown: Available options: "
+                     "HTML_5, XHTML_5, XHTML_1_0_STRICT, "
+                     "XHTML_1_0_TRANSITIONAL, XHTML_1_0_FRAMESET, XHTML_1_1, "
+                     "HTML_4_01_STRICT, HTML_4_01_TRANSITIONAL, "
+                     "HTML_4_01_FRAMESET, XHTML_BASIC_1_0, XHTML_BASIC_1_1.");
+        c->doctype = HTML_4_01_TRANSITIONAL;
+    }
+    return NULL;
+}
+
 static const char *set_markdown_css(cmd_parms * cmd, void *conf,
                                     const char *arg)
 {
@@ -219,28 +506,308 @@ static const char *set_markdown_footer(c
     return NULL;
 }
 
+static const char *set_markdown_headerfile(cmd_parms * cmd, void *conf,
+									   const char *arg)
+{
+    markdown_conf *c = (markdown_conf *) conf;
+    c->headerfile = arg;
+    return NULL;
+}
+
+static const char *set_markdown_footerfile(cmd_parms * cmd, void *conf,
+									   const char *arg)
+{
+    markdown_conf *c = (markdown_conf *) conf;
+    c->footerfile = arg;
+    return NULL;
+}
+
+static const char *set_markdown_flags(cmd_parms * cmd, void *conf,
+									   const char *arg)
+{
+    long int flags;
+    markdown_conf *c = (markdown_conf *) conf;
+
+    flags = strtol(arg, NULL, 0);
+    if(flags < 0 || flags > UINT_MAX){
+        /* Currently mkd_flag_t is an unsigned integer */
+
+        /* Invalid(out of range) flag, setting flag to the
+         * current default */
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0, NULL, "apache-mod-markdown: Flags \"%#lX\" "
+                     "invalid, setting to default value \"%#X\".\n",
+                     flags, DEFAULT_MKD_FLAGS);
+        c->mkd_flags = DEFAULT_MKD_FLAGS;
+    }else{
+        c->mkd_flags = flags;
+    }
+    return NULL;
+}
+
+static void *markdown_config_server_create(apr_pool_t *p, server_rec *s)
+{
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "markdown_config_server_create(): started with%s server rec",
+        (s == NULL ? "out" : ""));
+
+    markdown_conf *c = (markdown_conf *) apr_pcalloc(p, sizeof(markdown_conf));
+
+    c->wrapper    = 1;
+    c->doctype    = HTML_4_01_TRANSITIONAL;
+    c->mkd_flags  = DEFAULT_MKD_FLAGS;
+    c->headerfile = NULL;
+    c->footerfile = NULL;
+    c->header     = NULL;
+    c->footer     = NULL;
+    c->css        = NULL;
+
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "markdown_config_server_create(): finished with%s server rec (%d)",
+        (s == NULL ? "out" : ""), c->doctype);
+
+    return (void *) c;
+}
+
+static void *markdown_config_server_merge(apr_pool_t *p, void *BASE, void *ADD)
+{
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_server_merge(): started with%s BASE, with%s ADD",
+        (BASE == NULL ? "out" : ""),
+        (ADD  == NULL ? "out" : ""));
+
+    markdown_conf *c    = (markdown_conf *) apr_pcalloc(p, sizeof(markdown_conf));
+    markdown_conf *dir  = (markdown_conf *) ADD;
+    markdown_conf *base = (markdown_conf *) BASE;
+
+    c->wrapper    = ( dir->wrapper    == 0          ? base->wrapper    : dir->wrapper);
+    c->doctype    = ( dir->doctype    == HTML_UNSET ? base->doctype    : dir->doctype);
+    c->mkd_flags  = ( dir->mkd_flags  == 0          ? base->mkd_flags  : dir->mkd_flags);
+    c->headerfile = ( dir->headerfile == NULL       ? base->headerfile : dir->headerfile);
+    c->footerfile = ( dir->footerfile == NULL       ? base->footerfile : dir->footerfile);
+    c->header     = ( dir->header     == NULL       ? base->header     : dir->header);
+    c->footer     = ( dir->footer     == NULL       ? base->footer     : dir->footer);
+    c->css        = ( dir->css        == NULL       ? base->css        : dir->css);
+
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_server_merge(): finished with%s BASE, with%s ADD (%d = %d ? %d)",
+        (BASE == NULL ? "out" : ""),
+        (ADD  == NULL ? "out" : ""),
+        c->doctype,
+        dir->doctype,
+        base->doctype);
+
+    return c;
+}
+
+static void *markdown_config_per_dir_create(apr_pool_t * p, char *context)
+{
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_per_dir_create(): started with%s context",
+        (context == NULL ? "out" : ""));
+
+    markdown_conf *c = (markdown_conf *) apr_pcalloc(p, sizeof(markdown_conf));
+
+    c->wrapper    = 0;
+    c->doctype    = HTML_UNSET;
+    c->mkd_flags  = 0;
+    c->headerfile = NULL;
+    c->footerfile = NULL;
+    c->header     = NULL;
+    c->footer     = NULL;
+    c->css        = NULL;
+
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_per_dir_create(): finished with%s context (%d)",
+        (context == NULL ? "out" : ""), c->doctype);
+
+    return (void *) c;
+}
+
+static void *markdown_config_per_dir_merge(apr_pool_t * p, void *BASE, void *ADD)
+{
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_per_dir_merge(): started with%s BASE, with%s ADD",
+        (BASE == NULL ? "out" : ""),
+        (ADD == NULL ? "out" : ""));
+
+    markdown_conf *c    = (markdown_conf *) apr_pcalloc(p, sizeof(markdown_conf));
+    markdown_conf *dir  = (markdown_conf *) ADD;
+    markdown_conf *base = (markdown_conf *) BASE;
+
+    c->wrapper    = ( dir->wrapper    == 0          ? base->wrapper    : dir->wrapper);
+    c->doctype    = ( dir->doctype    == HTML_UNSET ? base->doctype    : dir->doctype);
+    c->mkd_flags  = ( dir->mkd_flags  == 0          ? base->mkd_flags  : dir->mkd_flags);
+    c->headerfile = ( dir->headerfile == NULL       ? base->headerfile : dir->headerfile);
+    c->footerfile = ( dir->footerfile == NULL       ? base->footerfile : dir->footerfile);
+    c->header     = ( dir->header     == NULL       ? base->header     : dir->header);
+    c->footer     = ( dir->footer     == NULL       ? base->footer     : dir->footer);
+    c->css        = ( dir->css        == NULL       ? base->css        : dir->css);
+
+    ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, p, "markdown_config_per_dir_merge(): finished with%s BASE, with%s ADD (%d = %d ? %d)",
+        (BASE == NULL ? "out" : ""),
+        (ADD == NULL ? "out" : ""),
+        c->doctype,
+        dir->doctype,
+        base->doctype);
+
+    return c;
+}
+
+static int markdown_check_file_exists(request_rec *r, server_rec *s, const char *section, const char *filename) {
+    apr_finfo_t a_info;
+    int rc, exists;
+
+    rc = apr_stat(&a_info, filename, APR_FINFO_MIN, r->pool);
+    if (rc == APR_SUCCESS) {
+        exists =
+        (
+            (a_info.filetype != APR_NOFILE)
+        && !(a_info.filetype &  APR_DIR)
+    );
+
+        if (!exists) {
+            if (r) {
+                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, "apache-mod-markdown: Failed to find %s file: %d - %s ", section, rc, filename);
+            } else {
+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "apache-mod-markdown: Failed to find %s file: %d - %s ", section, rc, filename);
+            }
+            rc = HTTP_INTERNAL_SERVER_ERROR;
+        } else {
+            rc = OK;
+        }
+    } else {
+        if (r) {
+            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, "apache-mod-markdown: Failed to find %s file: %d - %s ", section, rc, filename);
+        } else {
+            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "apache-mod-markdown: Failed to find %s file: %d - %s ", section, rc, filename);
+        }
+       rc = HTTP_INTERNAL_SERVER_ERROR;
+    }
+
+    return rc;
+}
+
+static int markdown_doc_contents(request_rec *r, const char *section, const char *filename, enum COMMENT_FLAGS flags)
+{
+    int rc, exists;
+    char buffer[256];
+    apr_size_t  a_size;
+    apr_file_t  *a_file;
+    //local_file = apr_pstrdup(r->pool, filename);
+    /* Figure out if the file we request exists and isn't a directory */
+    rc = markdown_check_file_exists(r, NULL, section, filename);
+    if (rc == OK) {
+        if ((flags & COMMENT_START) == COMMENT_START) {
+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): header", section);
+            ap_rprintf(r, "\n\n<!-- Start Of %s -->\n\n", section);
+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): header done", section);
+        }
+        a_size = sizeof(buffer);
+        rc = apr_file_open(&a_file, filename, APR_READ, APR_OS_DEFAULT, r->pool);
+        if (rc == APR_SUCCESS) {
+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): first read", section);
+            while (apr_file_read(a_file, buffer, &a_size) == APR_SUCCESS) {
+                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): other read", section);
+                ap_rwrite(buffer, a_size, r);
+            }
+            if ((flags & COMMENT_END) == COMMENT_END) {
+                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): footer", section);
+                ap_rprintf(r, "\n\n<!-- End Of %s -->\n\n", section);
+                ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): footer done", section);
+            }
+            apr_file_close(a_file);
+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "apache-mod-markdown->markdown_doc_contents(%s): file closed", section);
+            rc = OK;
+        } else {
+            rc = HTTP_NOT_FOUND;
+        }
+    }
+   return rc;
+}
+
+/*
+ *
+ * This routine is called after the server processes the configuration
+ * files.  At this point the module may review and adjust its configuration
+ * settings in relation to one another and report any problems.  On restart,
+ * this routine will be called twice, once in the startup process (which
+ * exits shortly after this phase) and once in the running server process.
+ *
+ * The return value is OK, DECLINED, or HTTP_mumble.  If we return OK, the
+ * server will still call any remaining modules with an handler for this
+ * phase.
+ */
+static int markdown_hook_check_config(apr_pool_t *pconf, apr_pool_t *plog,
+                                      apr_pool_t *ptemp, server_rec *s)
+{
+    markdown_conf *conf = (markdown_conf *) ap_get_module_config(s->module_config,
+                                                                 &markdown_module);
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "markdown_hook_check_config: markdown_conf found? %s", (conf == NULL ? "false" : "true"));
+    if (conf != NULL) {
+        if (conf->headerfile != NULL && conf->footerfile != NULL) {
+            if (!markdown_check_file_exists(NULL, s, "Header", conf->headerfile) ||
+                !markdown_check_file_exists(NULL, s, "Footer", conf->footerfile)) {
+                return DECLINED;
+            }
+            if (conf->css) {
+                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, s, "CSS specified whilst using Header/Footer file options, will be ignored");
+            }
+            /*************************************************
+             * The following is in the source commented out  *
+             * because markdown_hook_handler() does actually *
+             * use the DocType option                        *
+             *************************************************
+            if (conf->doc_type) {
+                ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, NULL, "DocType specifid whilst using Header/Footer file options, will be ignored");
+            }
+            */
+        } else if (conf->headerfile != NULL && conf->footerfile == NULL) {
+            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "Header specified, but footer was not\n");
+            return DECLINED;
+        } else if (conf->headerfile == NULL && conf->footerfile != NULL) {
+            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "Footer specified, but header was not\n");
+            return DECLINED;
+        }
+    }
+    return OK;
+}
+
+/* The markdown handler */
+
 static const command_rec markdown_cmds[] = {
+    AP_INIT_FLAG("MarkdownWrapper", set_markdown_wrapper, NULL, OR_ALL,
+                 "enable or disable HTML wrapper code output"),
+    AP_INIT_TAKE1("MarkdownDoctype", set_markdown_doctype, NULL, OR_ALL,
+                  "set Doctype"),
     AP_INIT_TAKE1("MarkdownCSS", set_markdown_css, NULL, OR_ALL,
                   "set CSS"),
-    AP_INIT_TAKE1("MarkdownHeaderHtml", set_markdown_header, NULL, OR_ALL,
+    AP_INIT_TAKE1("MarkdownHeader", set_markdown_header, NULL, OR_ALL,
                   "set Header HTML"),
-    AP_INIT_TAKE1("MarkdownFooterHtml", set_markdown_footer, NULL, OR_ALL,
+    AP_INIT_TAKE1("MarkdownFooter", set_markdown_footer, NULL, OR_ALL,
                   "set Footer HTML"),
+    AP_INIT_TAKE1("MarkdownHeaderFile", set_markdown_headerfile, NULL, OR_ALL,
+                  "set Header File"),
+    AP_INIT_TAKE1("MarkdownFooterFile", set_markdown_footerfile, NULL, OR_ALL,
+                  "set Footer File"),
+    AP_INIT_TAKE1("MarkdownFlags", set_markdown_flags, NULL, OR_ALL,
+                  "set Discount flags"),
     {NULL}
 };
 
 static void markdown_register_hooks(apr_pool_t * p)
 {
+    ap_hook_check_config(markdown_hook_check_config, NULL, NULL, APR_HOOK_MIDDLE);
     ap_hook_handler(markdown_handler, NULL, NULL, APR_HOOK_MIDDLE);
 }
 
 /* Dispatch list for API hooks */
-module AP_MODULE_DECLARE_DATA markdown_module = {
+AP_DECLARE_MODULE(markdown) = {
     STANDARD20_MODULE_STUFF,
-    markdown_config,            /* create per-dir    config structures */
-    NULL,                       /* merge  per-dir    config structures */
-    NULL,                       /* create per-server config structures */
-    NULL,                       /* merge  per-server config structures */
-    markdown_cmds,              /* table of config file commands       */
-    markdown_register_hooks     /* register hooks                      */
+    markdown_config_per_dir_create,            /* create per-dir    config structures */
+    markdown_config_per_dir_merge,             /* merge  per-dir    config structures */
+    markdown_config_server_create,             /* create per-server config structures */
+    markdown_config_server_merge,              /* merge  per-server config structures */
+    markdown_cmds,                             /* table of config file commands       */
+    markdown_register_hooks                    /* register hooks                      */
 };
+
+/*
+ * Local variables:
+ * indent-tabs-mode: nil
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ */
--- /dev/null
+++ apache-mod-markdown-1.0.3/mod_markdown.h
@@ -0,0 +1,23 @@
+#ifndef MOD_MARKDOWN_H
+#define MOD_MARKDOWN_H
+
+enum COMMENT_FLAGS {
+    COMMENT_START = 0x1,
+    COMMENT_END   = 0x2
+};
+
+int markdown_output(MMIOT *doc, request_rec *r, markdown_conf *conf);
+static int markdown_doc_header(MMIOT *doc, request_rec *r, markdown_conf *conf);
+static int markdown_doc_footer(request_rec *r, markdown_conf *conf);
+static int markdown_handler(request_rec *r);
+static int markdown_check_file_exists(request_rec *r, server_rec *s, const char *section, const char *filename);
+static int markdown_doc_contents(request_rec *r, const char *section, const char *filename, enum COMMENT_FLAGS flags);
+static void markdown_register_hooks(apr_pool_t * p);
+static void *markdown_config(apr_pool_t * p, char *dummy);
+static void *markdown_config_server_create(apr_pool_t *p, server_rec *s);
+static void *markdown_config_server_merge(apr_pool_t *p, void *BASE, void *ADD);
+static void *markdown_config_per_dir_create(apr_pool_t * p, char *context);
+static void *markdown_config_per_dir_merge(apr_pool_t * p, void *BASE, void *ADD);
+
+#endif
+
